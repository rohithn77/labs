AWSTemplateFormatVersion: 2010-09-09
Description: This template deploys a Bamboo windows agent for the Atlassian stack

Metadata:
  License:
    Description: >
      This template deploys a Bamboo windows agent for the Atlassian stack
      

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: AMI and instance type 
        Parameters:
          - imageId
          - instanceType
      -
        Label:
          default: EC2 configuration
        Parameters:
          - ec2Name
          - vpcID
          - subnetID
      -
        Label:
          default: Allowed inbound source IP addresses
        Parameters:
          - ingressIPv4
          - ingressIPv6

Parameters: 
  imageId:
    Description: Windows Server AMI ID ( aws ssm get-parameters-by-path --path /aws/service/ami-windows-latest --query "Parameters[].Name" )
    Type: String
    Default: ami-0c3b81a94373498ea      
  instanceType:
    Description: Instance type
    Type: String
    Default: t2.xlarge
  ec2Name:
    Description: Name of EC2 instance
    Type: String
    Default: atlassian-test-bamboo-win-agent
  vpcID:
    Type: AWS::EC2::VPC::Id
    Description: VPC with internet connectivity
    ConstraintDescription: Do specify a valid value
    AllowedPattern: ".+"
    Default: vpc-07814637d021ddbd0
  subnetID:
    Type: AWS::EC2::Subnet::Id
    Description: App Subnet 
    ConstraintDescription: Do specify a valid value
    AllowedPattern: ".+"
    Default: subnet-06d2756c23d880b9f
  ingressIPv4:
    Type: String
    Description: Allowed source prefix (IPv4) 
    Default: 0.0.0.0/0
  ingressIPv6:
    Type: String
    Description: Allowed source prefix (IPv6)
    Default: ::/0

Resources: 
  securityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic
      VpcId: !Ref vpcID
      SecurityGroupIngress:
        - Description: Bamboo TCP port 1 (IPv4)
          IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: !Ref ingressIPv4
        - Description: Bamboo UDP port 1 (IPv4)
          IpProtocol: "udp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: !Ref ingressIPv4
        - Description: Bamboo TCP port 2
          IpProtocol: "tcp"
          FromPort: "8443"
          ToPort: "8443"
          CidrIpv6: !Ref ingressIPv6
        - Description: Bamboo UDP port 2
          IpProtocol: "udp"
          FromPort: "8443"
          ToPort: "8443"
          CidrIpv6: !Ref ingressIPv6
      SecurityGroupEgress:
        - Description: Allow all outbound traffic (IPv4)
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0          
        - Description: Allow all outbound traffic (IPv6)
          IpProtocol: "-1"
          CidrIpv6: "::/0"       

  instanceIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: atalassian-bamboo-agent-policy
        PolicyDocument:
          Version: '2012-10-17'  
          Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::bamboo-agent.${AWS::Region}/*"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore" 
        
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
      - !Ref instanceIamRole

  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy: 
      ResourceSignal:
        Timeout: PT90M    
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup    
        00_setup:
          files:
            c:\\Users\\Administrator\\update-DCV.cmd:
              content: |
                @echo off
                cd \Windows\temp
                del \windows\temp\*.msi
                powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-virtual-display-x64-Release.msi', 'nice-dcv-virtual-display-x64-Release.msi')"
                msiexec.exe /i nice-dcv-virtual-display-x64-Release.msi /quiet /l dcv-display.log
                powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-server-x64-Release.msi', 'nice-dcv-server-x64-Release.msi')"
                msiexec.exe  /i nice-dcv-server-x64-Release.msi ADDLOCAL=ALL /quiet /norestart /l*v dcv_install_msi.log
                reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management\automatic-console-session /v owner /t REG_SZ /d "administrator" /f 
                reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management /v create-session /t REG_DWORD /d 1 /f
                reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management\automatic-console-session /v storage-root /t REG_SZ /d C:/DCV-Storage/ /f 
                powershell -command "$shortcut=(New-Object -ComObject WScript.Shell).CreateShortcut('C:\Users\Administrator\Desktop\DCV-Storage.lnk');$shortcut.TargetPath='C:\DCV-Storage\';$shortcut.Save()"
                reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\connectivity /v enable-quic-frontend /t REG_DWORD /d 1 /f
                powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-client-Release.msi', 'nice-dcv-client-Release.msi    '    )"
                msiexec.exe /i nice-dcv-client-Release.msi ADDLOCAL=ALL /quiet /norestart /l*v dcv_client_install_msi.log
    Properties:
      ImageId: !Ref imageId
      InstanceType: !Ref instanceType
      IamInstanceProfile: !Ref instanceProfile
      SubnetId: !Ref subnetID      
      Monitoring: true
      SecurityGroupIds:
        - !Ref securityGroup
      UserData: 
        Fn::Base64:
          !Sub |
            <script>
            @echo off
            cfn-init.exe -v --stack ${AWS::StackId} --resource ec2Instance --region ${AWS::Region} --configsets setup

            cd \windows\temp\
            
            @echo ** https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-win.html
            powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://amazon-ssm-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/windows_amd64/AmazonSSMAgentSetup.exe', 'AmazonSSMAgentSetup.exe')"
            c:\windows\temp\AmazonSSMAgentSetup.exe /S

            @echo ** https://docs.chocolatey.org/en-us/choco/setup
            @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"

            @echo ** https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-winprereq.html#setting-up-installing-general 
            powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-virtual-display-x64-Release.msi', 'nice-dcv-virtual-display-x64-Release.msi')"
            msiexec.exe /i nice-dcv-virtual-display-x64-Release.msi /quiet /l dcv-display.log

            @echo ** https://docs.aws.amazon.com/dcv/latest/adminguide/setting-up-installing-wininstall.html
            powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-server-x64-Release.msi', 'nice-dcv-server-x64-Release.msi')"
            msiexec.exe  /i nice-dcv-server-x64-Release.msi ADDLOCAL=ALL /quiet /norestart /l*v dcv_install_msi.log

            @echo ** https://docs.aws.amazon.com/dcv/latest/userguide/client-windows.html
            powershell -command "(New-Object System.Net.WebClient).DownloadFile('https://d1uj6qtbmh3dt5.cloudfront.net/nice-dcv-client-Release.msi', 'nice-dcv-client-Release.msi')"
            msiexec.exe /i nice-dcv-client-Release.msi ADDLOCAL=ALL /quiet /norestart /l*v dcv_client_install_msi.log

            @echo ** https://docs.aws.amazon.com/dcv/latest/adminguide/managing-sessions-start.html#managing-sessions-start-auto
            reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management\automatic-console-session /v owner /t REG_SZ /d "administrator" /f 
            reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management /v create-session /t REG_DWORD /d 1 /f

            @echo ** https://docs.aws.amazon.com/dcv/latest/adminguide/manage-storage.html
            mkdir C:\DCV-Storage\
            reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\session-management\automatic-console-session /v storage-root /t REG_SZ /d C:/DCV-Storage/ /f 
            powershell -command "$shortcut=(New-Object -ComObject WScript.Shell).CreateShortcut('C:\Users\Administrator\Desktop\DCV-Storage.lnk');$shortcut.TargetPath='C:\DCV-Storage\';$shortcut.Save()"

            @echo ** https://docs.aws.amazon.com/dcv/latest/adminguide/enable-quic.html
            reg add HKEY_USERS\S-1-5-18\Software\GSettings\com\nicesoftware\dcv\connectivity /v enable-quic-frontend /t REG_DWORD /d 1 /f
          
            @echo ** install AWSCLI
            cinst --no-progress -y awscli
            setx /M AWS_CLI_AUTO_PROMPT on-partial

            @echo ** Restarting DCV 
            net stop dcvserver
            net start dcvserver
                
            cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource ec2Instance --region ${AWS::Region}        
            </script>

Outputs:
  InstanceID:
    Description: EC2 Instance ID
    Value: !Ref ec2Instance
 
  PublicIP:
    Description: EC2 Public IP
    Value: !GetAtt ec2Instance.PublicIp

  SSMsessionManager:
    Description: SSM Session Manager login ("net user administrator MyStr@ngAdminPassw0rd" to change administrator password)
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${ec2Instance}"

